#build init
shieldShop = hou.node('/obj/Shield_SHOP/Shield_geo')
shieldRop = hou.node('/obj/SHIELD_ROP')
shf_a = shieldRop.node('./SHIELD_A')
shf_b = shieldRop.node('./SHIELD_B')

if shieldShop == None or shieldRop == None:
    hou.ui.displayMessage('BAD INPUT SCENE!!!')
else:
    run = hou.ui.displayMessage("select function to do", buttons=('add annihilator passes to render', 
                                'clean annihilator passes','cancel'), default_choice=0, close_choice=2, 
                                title= "annihilator passes control script")

    if run == 0 :
        #build annihilator subnetwork
        if shieldShop.node('./ANNIHILATORS_OUT') != None:
            shieldShop.node('./ANNIHILATORS_OUT').destroy()
           
        anhlSubnet = shieldShop.createNode('subnet', 'ANNIHILATORS_OUT')
        surfGlobsPos = shieldShop.node('./transform1').position()
        offset = hou.Vector2((4.0,-4.0))
        anhlSubnet.setPosition(surfGlobsPos + offset )
        anhlSubnet.setInput(0,shieldShop.node('./transform1'),0)
        anhlSubnet.setColor(hou.Color(1,0,0))
        #anhlSubnet.node('./suboutput1').destroy()
        
        nodes = dict((i.name(),i) for i in hou.node('/obj').children())
        selected = hou.ui.selectFromTree( [i.name() for i in hou.node('/obj').children()],
                                         picked=(), exclusive=True, message='please select node with annihilator points',
                                         title="select", clear_on_cancel=True)[0]

        for i in  nodes[selected].children():
            if i.isDisplayFlagSet() ==  1:
                node = i
                if nodes[selected].node('./annihilators') == None:
                    cache  = node.createOutputNode('filecache','annihilators')
                    cache.parm('execute').pressButton()
                    cache.parm('reload').pressButton()
                else:
                    cache = nodes[selected].node('./annihilators')
                    if hou.ui.displayMessage("Do you want to recache annihilators???", buttons=("YES" , "NO"), default_choice=1,close_choice=1, title='Update annihilator cache') == 0:
                        cache.parm('execute').pressButton()
                        cache.parm('reload').pressButton()
                break
                
        geo = node.geometry()
        points = geo.points()
        if points != None:
            for index, point in enumerate(points):
                pass_name = 'anhl_distance_' + str(index)
                anhlSubinput = anhlSubnet.node('./subinput1')
                currentAnhl = anhlSubnet.createNode('subnet',"ANHL_" + str(index))
                offset = hou.Vector2((2.0,-2.0 * index))
                currentAnhl.setPosition(anhlSubinput.position() + offset )
                currentAnhl.setInput(0,anhlSubinput,0)
                #currentAnhl.node('./suboutput1').destroy()
                
                crAnhlSubInput = currentAnhl.node('./subinput1')
                
                constant =  currentAnhl.createNode('constant','anhlPtNum')
                constant.setPosition(crAnhlSubInput.position() + hou.Vector2(0,-4))
                constant.parm('consttype').set('int')
                constant.parm('intdef').set(index)
                
                ptimport = currentAnhl.createNode('importpoint','getAnhlPos')
                ptimport.setPosition(crAnhlSubInput.position() + hou.Vector2(4,-2))
                ptimport.setInput(3,constant,0)
                path = '`chs("' + cache.path() + '/file")`'
                ptimport.parm('file').set(path)
                
                dist = currentAnhl.createNode('distance','build_distance')
                dist.setPosition(crAnhlSubInput.position() + hou.Vector2(8,0))
                dist.setInput(0,crAnhlSubInput,0)
                dist.setInput(1,ptimport,0)
                
                anhlOut = currentAnhl.node('./suboutput1')
                anhlOut.setPosition(crAnhlSubInput.position() + hou.Vector2(12,0))
                anhlOut.setInput(1,dist,0)
                
                anhlOutAll = anhlSubnet.node('./suboutput1')
                anhlOutAll.setInput(1 + index,currentAnhl,0)
                                
                bind = shieldShop.createNode('bind','export_distance')
                bind.setPosition(anhlSubnet.position() + hou.Vector2(4,-3 * index))
                bind.parm('parmname').set(pass_name)
                bind.parm('exportparm').set(1)
                bind.setInput(0,anhlSubnet,index)
                
                parmsA =  [i.eval() for i in shf_a.parms()]
                if pass_name not in parmsA:
                    origin_a = shf_a.parm('vm_numaux').eval()
                    shf_a.parm('vm_numaux').set(origin_a + 1)
                    shf_a.parm('vm_variable_plane' + str(origin_a + 1)).set(pass_name)
                    shf_a.parm('vm_vextype_plane' + str(origin_a + 1)).set('float')
                    shf_a.parm('vm_channel_plane' + str(origin_a + 1)).set(pass_name)
              
                parmsB =  [i.eval() for i in shf_b.parms()]
                if pass_name not in parmsB:
                    origin_b = shf_b.parm('vm_numaux').eval()
                    shf_b.parm('vm_numaux').set(origin_b + 1)
                    shf_b.parm('vm_variable_plane' + str(origin_b + 1)).set(pass_name)
                    shf_b.parm('vm_vextype_plane' + str(origin_b + 1)).set('float')
                    shf_b.parm('vm_channel_plane' + str(origin_b + 1)).set(pass_name)
                    
                    
                    
    elif run == 1:
        if shieldShop.node('./ANNIHILATORS_OUT') != None:
            shieldShop.node('./ANNIHILATORS_OUT').destroy()
        for shopNode in [child for child in shieldShop.children() if "export_distance" in child.name() and child.type().name() == 'bind']:
            shopNode.destroy()
            
        rops = [shf_a,shf_b]
        for rop in rops:
            indexToClean = []
            extraImgParm = rop.parm('vm_numaux')
            for parm in extraImgParm.multiParmInstances():
                if 'vm_variable_plane' in parm.name():
                    if 'anhl_distance' in parm.eval():
                        plane_num = int(parm.name().replace('vm_variable_plane',''))
                        indexToClean.append(plane_num)
            
            indexToClean.reverse()
            for i in indexToClean:
                extraImgParm.removeMultiParmInstance(i-1)
                
            hou.ui.displayMessage("You have deleted all anihhilatro extra image planes")
            
